<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackgroundWorkerError" xml:space="preserve">
    <value>A problem caused motion detection to be aborted:

{0}</value>
  </data>
  <data name="FilesRemainingCount" xml:space="preserve">
    <value>{0:n0} remaining</value>
  </data>
  <data name="FilesSelectedCount" xml:space="preserve">
    <value>{0:n0} file(s)</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>Video motion detection has finished.

Time taken: {0}</value>
  </data>
  <data name="FinishedTitle" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="MotionDetectorAbortingSequence" xml:space="preserve">
    <value>{0}: Aborting this sequence.</value>
  </data>
  <data name="MotionDetectorChangedPixels" xml:space="preserve">
    <value>{0}: Changed pixels: {1}</value>
  </data>
  <data name="MotionDetectorEmptyFrame" xml:space="preserve">
    <value>{0}: Encountered an empty frame. Advancing to next frame and retrying.</value>
  </data>
  <data name="MotionDetectorFileCouldNotRead" xml:space="preserve">
    <value>{0}: Could not read the video file.</value>
  </data>
  <data name="MotionDetectorFinished" xml:space="preserve">
    <value>{0}: Finished. Degree of activity: {1}</value>
  </data>
  <data name="MotionDetectorMotionDetected" xml:space="preserve">
    <value>{0}: *** Motion detected at {1:n0}s</value>
  </data>
  <data name="MotionDetectorNoFramesInVideo" xml:space="preserve">
    <value>{0}: Did not manage to grab a non-empty frame from the video file.</value>
  </data>
  <data name="MotionDetectorSequenceIncreasing" xml:space="preserve">
    <value>{0}: Sequence is increasing: {1}/{2}</value>
  </data>
  <data name="MotionDetectorStatusLog" xml:space="preserve">
    <value>{0}: {1:n0}/{2:n0} frames processed.</value>
  </data>
  <data name="NewROIPrompt" xml:space="preserve">
    <value>Are you sure you want to clear the current region of interest?</value>
  </data>
  <data name="NewROITitle" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="NoROIMessage" xml:space="preserve">
    <value>You did not set a region of interest. Motion detection will be performed on the entire content of each video frame. This is probably going to be slow.

Is this what you want? If not, please click No and set a region of interest.</value>
  </data>
  <data name="NoVideosMessage" xml:space="preserve">
    <value>You did not select any video files to perform motion detection on. Please click Browse and select one or more video files, then try again.</value>
  </data>
  <data name="OpenMaskFormError" xml:space="preserve">
    <value>A problem occurred with the window for selecting the region of interest.

{0}</value>
  </data>
  <data name="OpenResultFileError" xml:space="preserve">
    <value>A problem occurred while trying to open the result file for writing:

{0}</value>
  </data>
  <data name="OpenROIError" xml:space="preserve">
    <value>A problem occurred while trying to open this region of interest:

{0}</value>
  </data>
  <data name="OpenROITitle" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="SaveROIError" xml:space="preserve">
    <value>A problem occurred while trying to save this region of interest:

{0}</value>
  </data>
  <data name="SaveROITitle" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SillyROIMessage" xml:space="preserve">
    <value>The region of interest you highlighted covers the entire frame. In this situation, simply not using a region of interest at all will be slightly faster.

Is it okay to discard your region of interest?</value>
  </data>
</root>